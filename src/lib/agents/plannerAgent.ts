import { AgentContext, AgentResponse, GenerationPlan } from "./types";
import { openAIService } from "@/services/openai-service";
import { debugLog } from "@/utils/debugLog";

const PLANNER_SYSTEM_PROMPT = `You are an expert website architect and planner.
Your task is to analyze the user's website request and create a detailed generation plan.

Your JSON must include these fields:
- pages: array of page definitions with name, path, components, sections, and meta
- components: array with name and path
- styles: array with name, path and type
- siteConfig: object with name, description, primaryColor, secondaryColor, typography, layout

IMPORTANT: Return ONLY valid JSON conforming to the GenerationPlan type. Do NOT include explanations or markdown formatting.`;

/**
 * Planner agent that takes a user prompt and generates a structured website plan
 */
export const plannerAgent = async (context: AgentContext): Promise<AgentResponse<GenerationPlan>> => {
  try {
    let result = "";
    await openAIService.generateWebsiteIdea(
      context.prompt,
      context.model,
      (partialText) => {
        result = partialText;
        debugLog("üß† Prompt recebido", context.prompt);
      },
      PLANNER_SYSTEM_PROMPT
    );
    
    debugLog("üß† Retorno bruto do planner", result);
    
    const parsed: GenerationPlan = JSON.parse(result);

    // Fallbacks e valida√ß√£o m√≠nima
    if (!parsed.pages) {
      throw new Error("Plan must include pages array");
    }
    if (!parsed.components) {
      parsed.components = [
        { name: "Header", path: "components/Header.tsx" },
        { name: "Footer", path: "components/Footer.tsx" }
      ];
    }
    if (!parsed.styles) {
      parsed.styles = [
        { name: "globals", path: "styles/globals.css", type: "css" },
        { name: "variables", path: "styles/variables.css", type: "css" }
      ];
    }
    if (!parsed.siteConfig) {
      parsed.siteConfig = {
        name: "Default Site",
        description: "Generated by AI",
        primaryColor: "#3490dc",
        secondaryColor: "#ffed4a",
        typography: {
          headingFont: "Inter, sans-serif",
          bodyFont: "Inter, sans-serif"
        },
        layout: "responsive"
      };
    }

    return { content: parsed };
  } catch (error) {
    debugLog("‚ùå Erro ao interpretar JSON do planner", error);
    return {
      error: error instanceof Error ? error.message : "Unknown error parsing planner result"
    };
  }
};

